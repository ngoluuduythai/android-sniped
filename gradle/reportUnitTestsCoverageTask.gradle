apply plugin: 'jacoco'

// run ./gradlew clean reportUnitTestsCoverage
task reportUnitTestsCoverage(
        type: JacocoReport,
        dependsOn: [
                // Android Tests
                // "createDevDebugCoverageReport",
                // Unit Tests
                "testDevDebugUnitTest"
        ]) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        xml.enabled = true
        html.enabled = true
        xml.setDestination(file("${buildDir}/reports/coverage/unit-tests/report.xml"))
        html.setDestination(file("${buildDir}/reports/coverage/unit-tests"))
    }

    def fileFilter = [
            '**/*$InjectAdapter.class',
            '**/*$ModuleAdapter.class',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/*Builder.*',
            '**/*JavascriptBridge.class',
            '**/*Test*.*',
            '**/AutoValue_*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/R$*.class',
            '**/R.class',
            'android/**/*.*',
            // Dagger2 generated code
            '**/*_*Factory*.*',
            '**/*_MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*Component*.*',
            '**/*Module*.*'
    ]

    def debugTree = fileTree(
            dir: "${buildDir}/intermediates/classes/dev/debug",
            excludes: fileFilter
    )
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])

    executionData = fileTree(
            dir: project.projectDir,
            includes: [
                    // Android Tests
                    //'**/*.ec',
                    // Unit Tests
                    '**/*.exec'
            ])
}
